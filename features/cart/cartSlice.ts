import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState } from '../../app/store'
import parsePrice from '../../lib/parsePrice'
import IProduct from '../../models/IProduct'
// import { fetchCart } from './cartAPI'

interface CartItem {
  id: string
  name: string
  price: number
  quantity: number
  imageSrc?: string
  href?: string
}

export interface CartState {
  value: CartItem[]
  status: 'idle' | 'loading' | 'failed'
}

const initialState: CartState = {
  value: [],
  status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'product/check',
  async (cartItem: CartItem) => {
    // const response = await fetchCart(amount)
    // The value we return becomes the `fulfilled` action payload
    // return response.data
    return true
  }
)

export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    add: (state, action: PayloadAction<IProduct>) => {
      const hasItem = state.value.some(item => item.id === action.payload.id)
      if (hasItem) {
        state.value = state.value.map(item => {
          if (item.id === action.payload.id) return { ...item, quantity: item.quantity + 1 }
          return item
        })
        return
      }
      state.value.push({
        id: action.payload.id + '',
        name: action.payload.name,
        price: parsePrice(action.payload.price),
        imageSrc: action.payload.imageSrc,
        quantity: 1
      })
    },
    increment: (state, action: PayloadAction<CartItem>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value = state.value.map(item => {
        if (item.id === action.payload.id) return { ...action.payload, quantity: action.payload.quantity + 1 }
        return item
      })
    },
    decrement: (state, action: PayloadAction<CartItem>) => {
      state.value = state.value.map(item => {
        if (item.id === action.payload.id) return { ...action.payload, quantity: action.payload.quantity - 1 }
        return item
      })
      state.value = state.value.filter(item => item.quantity > 0)
    },
    remove: (state, action: PayloadAction<CartItem>) => {
      state.value = state.value.filter(item => item.id !== action.payload.id)
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        // action.payload
        // boolean with availability data
      })
  },
})

export const { increment, decrement, remove, add } = cartSlice.actions

export const cartActions = cartSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.cart.value)`
export const selectCart = (state: AppState) => state.cart.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//     (dispatch, getState) => {
//       const currentValue = selectCart(getState())
//       if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount))
//       }
//     }

export default cartSlice.reducer